package implementation;

import java.util.Vector;

public class BPlusTree {
	private static int maxLeafSize;
	private Node root;
	
	public BPlusTree(int maxItems) {
		BPlusTree.maxLeafSize = maxItems;
		root = new LeafNode();
	}
	
	public void insertItem(String item) {
		root.insert(new DataNode(item));
	}

	
	abstract class Node {
		protected Vector<DataNode> dataList = new Vector<DataNode>();
		protected TreeNode parent;
		protected int maxSize;
				
		protected boolean isFull() {
			boolean full = false;
			
			if(dataList.size() == maxLeafSize) {
				full = true;
			}
			
			return full;
		}
		
		protected DataNode getDataAt(int index) {
			DataNode data = null;
			
			if(dataList.size() > index) {
				data = (DataNode) dataList.elementAt(index);
			}
	
			return data;
		}
		
		abstract void insert(DataNode value);
	
	}
	
	private class LeafNode extends Node {

		void insert(DataNode item) {
			if(dataList.size() == maxLeafSize) {
				
				splitTree();
				
			} else {
				
				int insertLocation = findSpot(item.getData());
				
				dataList.insertElementAt(item, insertLocation);
				System.out.println("Inserted");
			}
			
		}
		
		private void splitTree() {
			LeafNode left = new LeafNode();
			LeafNode right = new LeafNode();			
			
			if (parent == null) {
				parent = new TreeNode(dataList.elementAt(maxLeafSize/2));
				
				for(int i = 0; i < (maxLeafSize/2); i ++) {
					left.insert(dataList.elementAt(i));					
				}
				
				parent.dataList.elementAt(0).setLeft(left);
				left.parent = parent;
				
				for(int i = (maxLeafSize/2); i < maxLeafSize; i ++) {
					right.insert(dataList.elementAt(i));
				}
				
				parent.dataList.elementAt(0).setRight(right);
				right.parent = parent;
				
			}
		}
		
		private int findSpot(String value) {
			int location = dataList.size();
			
			for(int i = 0; i < dataList.size(); i++) {
				if(dataList.elementAt(i).getData().compareTo(value) >= 0) {
					location = i;
				}
			}
			
			
			return location;			
		}
		
	}
	
	private class TreeNode extends Node {
		
		public TreeNode(DataNode data) {
			dataList.insertElementAt(data, 0);
			parent = null;
		}

		void insert(DataNode item) {
			// TODO Auto-generated method stub			
		}
	}
		
	private class DataNode {
		String value;
		Node right;
		Node left;

		public DataNode(String value) {
			this.value = value;
			right = null;
			left = null;
		}
		
		public String getData() {
			return value;
		}
		
		public void setLeft(Node node) {
			left = node;
		}
		
		public void setRight(Node node) {
			right = node;
		}
	}
}
